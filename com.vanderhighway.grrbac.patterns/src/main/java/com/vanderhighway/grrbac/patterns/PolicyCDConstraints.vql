/*******************************************************************************
 * Policy Queries
 *******************************************************************************/

package com.vanderhighway.grrbac.patterns

import "https://vanderhighway.com/grrbac/2020"
import "http://www.eclipse.org/emf/2002/Ecore"
import java ^com.vanderhighway.grrbac.aggregators.Scenario
import java ^com.vanderhighway.grrbac.patterns.PolicyAuthorizationRelations
import java ^com.vanderhighway.grrbac.patterns.PolicyTemporalRelations

// ---- Seperation of Duty ----
pattern SoDURViolation(constraint: SoDURConstraint, user: User){
	SoDURConstraint.left(constraint, left);
	SoDURConstraint.right(constraint, right);
   	Role.RU(left, user);
   	Role.RU(right, user);
}

pattern SoDUDViolation(constraint: SoDUDConstraint, out scenario: java Scenario, user: User){
	SoDUDConstraint.left(constraint, left);
	SoDUDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USD(user, scenario, left);
    find USD(user, scenario, right);
}

pattern SoDUPViolation(constraint: SoDUPConstraint, scenario: java Scenario, user: User){
	SoDUPConstraint.left(constraint, left);
	SoDUPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USP(user, scenario, left);
    find USP(user, scenario, right);
}

pattern SoDRDViolation(constraint: SoDRDConstraint, scenario: java Scenario, role: Role){
	SoDRDConstraint.left(constraint, left);
	SoDRDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find RHSDH(role, scenario, left);
    find RHSDH(role, scenario, right);
}

pattern SoDRPViolation(constraint: SoDRPConstraint, scenario: java Scenario, role: Role){
	SoDRPConstraint.left(constraint, left);
	SoDRPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find RSP(role, scenario, left);
    find RSP(role, scenario, right);
}

pattern SoDDPViolation(constraint: SoDDPConstraint, demarcation: Demarcation){
	SoDDPConstraint.left(constraint, left);
	SoDDPConstraint.right(constraint, right);
   	Permission.PD(left, demarcation);
   	Permission.PD(right, demarcation);
}

// ---------------------


// ---- Prerequisite ----

pattern PrerequisiteURViolation(constraint: PrerequisiteURConstraint, user: User){
	PrerequisiteURConstraint.left(constraint, left);
	PrerequisiteURConstraint.right(constraint, right);
   	Role.RU(left, user);
   	neg Role.RU(right, user);
}

pattern PrerequisiteUDViolation(constraint: PrerequisiteUDConstraint, scenario: java Scenario, user: User){
	PrerequisiteUDConstraint.left(constraint, left);
	PrerequisiteUDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USD(user, scenario, left);
    neg find USD(user, scenario, right);
}

pattern PrerequisiteUPViolation(constraint: PrerequisiteUPConstraint, scenario: java Scenario, user: User){
	PrerequisiteUPConstraint.left(constraint, left);
	PrerequisiteUPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USP(user, scenario, left);
    neg find USP(user, scenario, right);
}

pattern PrerequisiteRDViolation(constraint: PrerequisiteRDConstraint, scenario: java Scenario, role: Role){
	PrerequisiteRDConstraint.left(constraint, left);
	PrerequisiteRDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find RHSDH(role, scenario, left);
    neg find RHSDH(role, scenario, right);
}

pattern PrerequisiteRPViolation(constraint: PrerequisiteRPConstraint, scenario: java Scenario, role: Role){
	PrerequisiteRPConstraint.left(constraint, left);
	PrerequisiteRPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find RSP(role, scenario, left);
    neg find RSP(role, scenario, right);
}

pattern PrerequisiteDPViolation(constraint: PrerequisiteDPConstraint, demarcation: Demarcation){
	PrerequisiteDPConstraint.left(constraint, left);
	PrerequisiteDPConstraint.right(constraint, right);
   	Permission.PD(left, demarcation);
   	neg Permission.PD(right, demarcation);
}

// ---------------------




// ---- Binding of Duty ----

pattern BoDURViolation(constraint: BoDURConstraint, user: User){
	BoDURConstraint.left(constraint, left);
	BoDURConstraint.right(constraint, right);
   	Role.RU(left, user);
   	neg Role.RU(right, user);
} or {
	BoDURConstraint.left(constraint, left);
	BoDURConstraint.right(constraint, right);
   	neg Role.RU(left, user);
   	Role.RU(right, user);
}

pattern BoDUDViolation(constraint: BoDUDConstraint, scenario: java Scenario, user: User){
	BoDUDConstraint.left(constraint, left);
	BoDUDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USD(user, scenario, left);
    neg find USD(user, scenario, right);
} or {
	BoDUDConstraint.left(constraint, left);
	BoDUDConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	neg find USD(user, scenario, left);
    find USD(user, scenario, right);
}

pattern BoDUPViolation(constraint: BoDUPConstraint, scenario: java Scenario, user: User){
	BoDUPConstraint.left(constraint, left);
	BoDUPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find USP(user, scenario, left);
    neg find USP(user, scenario, right);
} or {
    BoDUPConstraint.left(constraint, left);
	BoDUPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	neg find USP(user, scenario, left);
    find USP(user, scenario, right);
}

pattern BoDRDViolation(constraint: BoDRDConstraint, scenario: java Scenario, role: Role){
	BoDRDConstraint.left(constraint, left);
	BoDRDConstraint.right(constraint, right);
   	find RHSDH(role, scenario, left);
    neg find RHSDH(role, scenario, right);
} or { 
	BoDRDConstraint.left(constraint, left);
	BoDRDConstraint.right(constraint, right);
   	neg find RHSDH(role, scenario, left);
    find RHSDH(role, scenario, right);
}


pattern BoDRPViolation(constraint: BoDRPConstraint, scenario: java Scenario, role: Role){
	BoDRPConstraint.left(constraint, left);
	BoDRPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	find RSP(role, scenario, left);
    neg find RSP(role, scenario, right);
} or {
	BoDRPConstraint.left(constraint, left);
	BoDRPConstraint.right(constraint, right);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	neg find RSP(role, scenario, left);
    find RSP(role, scenario, right);
}

pattern BoDDPViolation(constraint: BoDDPConstraint, demarcation: Demarcation){
	BoDDPConstraint.left(constraint, left);
	BoDDPConstraint.right(constraint, right);
   	Permission.PD(left, demarcation);
   	neg Permission.PD(right, demarcation);
} or {
	BoDDPConstraint.left(constraint, left);
	BoDDPConstraint.right(constraint, right);
   	neg Permission.PD(left, demarcation);
   	Permission.PD(right, demarcation);
}

// ---------------------

// Cardinality

pattern CardinalityURViolation(constraint: CardinalityURConstraint, usageCount: java Integer){
	CardinalityURConstraint.role(constraint, role);
	CardinalityURConstraint.bound(constraint, bound);
   	usageCount == count User.UR(_, role);
   	check(usageCount > bound);
}

pattern CardinalityUDViolation(constraint: CardinalityUDConstraint, scenario: java Scenario, usageCount: java Integer){
	CardinalityUDConstraint.demarcation(constraint, demarcation);
	CardinalityUDConstraint.bound(constraint, bound);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	usageCount == count find USD(_, scenario, demarcation);
   	check(usageCount > bound);
}

pattern CardinalityUPViolation(constraint: CardinalityUPConstraint, scenario: java Scenario, usageCount: java Integer){
	CardinalityUPConstraint.permission(constraint, permission);
	CardinalityUPConstraint.bound(constraint, bound);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	usageCount == count find USP(_, scenario, permission);
   	check(usageCount > bound);
}

pattern CardinalityRDViolation(constraint: CardinalityRDConstraint, scenario: java Scenario, usageCount: java Integer){
	CardinalityRDConstraint.demarcation(constraint, demarcation);
	CardinalityRDConstraint.bound(constraint, bound);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	usageCount == count find RHSDH(_, scenario, demarcation);
   	check(usageCount > bound);
}

pattern CardinalityRPViolation(constraint: CardinalityRPConstraint, scenario: java Scenario, usageCount: java Integer){
	CardinalityRPConstraint.permission(constraint, permission);
	CardinalityRPConstraint.bound(constraint, bound);
	PolicyDependentAuthorizationConstraint.temporalContext(constraint, context);
	find ScenarioTemporalContext(scenario, context);
   	usageCount == count find RSP(_, scenario, permission);
   	check(usageCount > bound);
}

pattern CardinalityDPViolation(constraint: CardinalityDPConstraint, usageCount: java Integer){
	CardinalityDPConstraint.permission(constraint, permission);
	CardinalityDPConstraint.bound(constraint, bound);
   	usageCount == count Demarcation.DP(_, permission);
   	check(usageCount > bound);
}

// ---------------------